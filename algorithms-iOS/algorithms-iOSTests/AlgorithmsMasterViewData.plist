<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>name</key>
		<string>Divide &amp; Conquer</string>
		<key>catId</key>
		<integer>1</integer>
		<key>shortDiscription</key>
		<string>Recursion Algorithms</string>
		<key>algorithms</key>
		<array>
			<dict>
				<key>algId</key>
				<integer>1</integer>
				<key>name</key>
				<string>Merge Sort</string>
				<key>explanation</key>
				<string>Cost O(n*lg n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698570</string>
					<key>briefDescription</key>
					<string>Refer to CLRS 3e, page 27</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>2</integer>
				<key>name</key>
				<string>X power to n(x^n)</string>
				<key>explanation</key>
				<string>Calculate x^n/2*x^n/2, O(lg n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698586</string>
					<key>briefDescription</key>
					<string>Note to n when n is not even</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>3</integer>
				<key>name</key>
				<string>Maxium sub array</string>
				<key>explanation</key>
				<string>Use O(n*lg n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698589</string>
					<key>briefDescription</key>
					<string>Divide the array, calculate left-max, right-max, cross-max</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>4</integer>
				<key>name</key>
				<string>Fibonacci Number</string>
				<key>explanation</key>
				<string>Using maxtrix, O(n*lg n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698625</string>
					<key>briefDescription</key>
					<string>Use a matrix, ([[1,1],[1,0]])^n, recursion, not lose accuracy</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>5</integer>
				<key>name</key>
				<string>Binary Search</string>
				<key>explanation</key>
				<string>Must know, O(lg n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698634</string>
					<key>briefDescription</key>
					<string>Wildly used in CS, a must-know algorithm</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>6</integer>
				<key>name</key>
				<string>VLSI:Very Large Scale Integration</string>
				<key>explanation</key>
				<string>Find a `H` layout</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698639</string>
					<key>briefDescription</key>
					<string>Not the usual recursion-tree, but use an H-like layout</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>7</integer>
				<key>name</key>
				<string>Strassen&apos;s method</string>
				<key>explanation</key>
				<string>n*n matrix multiplication with O(n^2.81)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698645</string>
					<key>briefDescription</key>
					<string>One of the most brillent algorithms in the world.</string>
				</dict>
			</dict>
		</array>
	</dict>
	<dict>
		<key>name</key>
		<string>Naive Algorithms</string>
		<key>catId</key>
		<string>99</string>
		<key>shortDiscription</key>
		<string>Know them, but do NOT use them</string>
		<key>algorithms</key>
		<array>
			<dict>
				<key>algId</key>
				<integer>1</integer>
				<key>name</key>
				<string>Bubble Sort</string>
				<key>explanation</key>
				<string>Cost O(n^2)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1730843</string>
					<key>briefDescription</key>
					<string>Refer to CLRS 3e, page 40</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>2</integer>
				<key>name</key>
				<string>Insertion Sort</string>
				<key>explanation</key>
				<string>Cost O(n^2)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698565</string>
					<key>briefDescription</key>
					<string>Refer to CLRS 3e, page 27</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>3</integer>
				<key>name</key>
				<string>Fibonacci Number 1</string>
				<key>explanation</key>
				<string>Toooo bad, cost O(Ï†^n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698608</string>
					<key>briefDescription</key>
					<string>Calculate the result recursively, most beginner will choose this algorithm</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>4</integer>
				<key>name</key>
				<string>Fibonacci Number 2</string>
				<key>explanation</key>
				<string>Buttom-up, cost O(n)</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698615</string>
					<key>briefDescription</key>
					<string>Create an array, calculate the result one by one</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>5</integer>
				<key>name</key>
				<string>Fibonacci Number 3</string>
				<key>explanation</key>
				<string>Use golden ratio, but not accurate</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698620</string>
					<key>briefDescription</key>
					<string>Use golden ratio, recursion squaring, but float point will lose accuracy on computer</string>
				</dict>
			</dict>
			<dict>
				<key>algId</key>
				<integer>6</integer>
				<key>name</key>
				<string>n*n Matrix Multiplication</string>
				<key>explanation</key>
				<string>Calculate with 3 embedded loops</string>
				<key>gist</key>
				<dict>
					<key>url</key>
					<string>https://gist.github.com/1698654</string>
					<key>briefDescription</key>
					<string>Normal solution</string>
				</dict>
			</dict>
		</array>
	</dict>
</array>
</plist>
